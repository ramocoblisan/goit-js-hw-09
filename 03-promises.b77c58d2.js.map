{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAKbQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAMC,iBAGN,MAAMC,EAAaC,SAASC,KAAKC,SAAShB,MAAMiB,MAAO,IACjDC,EAAYJ,SAASC,KAAKC,SAASG,KAAKF,MAAO,IAC/CG,EAASN,SAASC,KAAKC,SAASI,OAAOH,MAAO,IAGpD,IAAK,IAAII,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAIhCvB,EAAcuB,EAHAR,GAAcQ,EAAI,GAAKH,GAIlCI,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA2B,OAAgBC,QAAQ,uBAAqBzB,QAAiBC,MAAU,IAEzEyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA2B,OAAgBG,QAAQ,sBAAoB3B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import * as Notiflix from 'notiflix';\n\n function createPromise(position, delay) {\n   const shouldResolve = Math.random() > 0.3;\n\n   // Return a promise\n   return new Promise((resolve, reject) => {\n     setTimeout(() => {\n       if (shouldResolve) {\n         resolve({ position, delay });\n       } else {\n         reject({ position, delay });\n       }\n     }, delay);\n   });\n }\n\n // Handle form submission\n document.querySelector('.form').addEventListener('submit', function (event) {\n   event.preventDefault();\n\n   // Get form values\n   const firstDelay = parseInt(this.elements.delay.value, 10);\n   const delayStep = parseInt(this.elements.step.value, 10);\n   const amount = parseInt(this.elements.amount.value, 10);\n\n   // Create promises\n   for (let i = 1; i <= amount; i++) {\n     const delay = firstDelay + (i - 1) * delayStep;\n\n     // Use Notiflix to show notifications\n     createPromise(i, delay)\n       .then(({ position, delay }) => {\n         Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n       })\n       .catch(({ position, delay }) => {\n         Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n       });\n   }\n });"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","firstDelay","parseInt","this","elements","value","delayStep","step","amount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.b77c58d2.js.map"}